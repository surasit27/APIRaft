// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using APIRaft.Data;

#nullable disable

namespace APIRaft.Models
{
    public partial class RaftpjContext : DbContext
    {
        public RaftpjContext()
        {
        }

        public RaftpjContext(DbContextOptions<RaftpjContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Activity> Activity { get; set; }
        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<Business> Business { get; set; }
        public virtual DbSet<DetailServices> DetailServices { get; set; }
        public virtual DbSet<Map> Map { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderDetails> OrderDetails { get; set; }
        public virtual DbSet<OrderServices> OrderServices { get; set; }
        public virtual DbSet<Promotion> Promotion { get; set; }
        public virtual DbSet<Raft> Raft { get; set; }
        public virtual DbSet<Services> Services { get; set; }
        public virtual DbSet<StatusBusiness> StatusBusiness { get; set; }
        public virtual DbSet<StatusOrder> StatusOrder { get; set; }
        public virtual DbSet<StatusPromotion> StatusPromotion { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<ViewRafts> ViewRafts { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Server=10.0.0.181,1433;Database=RaftPJ;User Id=Student;password=123456;Trusted_Connection=False;MultipleActiveResultSets=true;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Thai_CI_AS");

            modelBuilder.Entity<Activity>(entity =>
            {
                entity.Property(e => e.ActivityId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("activity_id");

                entity.Property(e => e.ActivityBusinessId)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("activity_business_id");

                entity.Property(e => e.ActivityDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("activity_details");

                entity.Property(e => e.ActivityImagePaht)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("activity_image_paht");

                entity.Property(e => e.ActivityName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("activity_name");

                entity.Property(e => e.ActivityVideoPaht)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("activity_video_paht");

                entity.HasOne(d => d.ActivityBusiness)
                    .WithMany(p => p.Activity)
                    .HasForeignKey(d => d.ActivityBusinessId)
                    .HasConstraintName("FK_Activity_Business");
            });

            modelBuilder.Entity<Admin>(entity =>
            {
                entity.Property(e => e.AdminId).HasColumnName("admin_id");

                entity.Property(e => e.AdminName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("admin_name");

                entity.Property(e => e.AdminPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("admin_password");
            });

            modelBuilder.Entity<Business>(entity =>
            {
                entity.Property(e => e.BusinessId)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("business_id");

                entity.Property(e => e.BusinessAccountnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("business_Accountnumber");

                entity.Property(e => e.BusinessAddress)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("business_address");

                entity.Property(e => e.BusinessBank)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_bank");

                entity.Property(e => e.BusinessDistrict)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("business_district");

                entity.Property(e => e.BusinessEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_email");

                entity.Property(e => e.BusinessIdline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("business_idline");

                entity.Property(e => e.BusinessName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_name");

                entity.Property(e => e.BusinessPassword)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("business_password");

                entity.Property(e => e.BusinessProvince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("business_province");

                entity.Property(e => e.BusinessRegister)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("business_register");

                entity.Property(e => e.BusinessStatusId).HasColumnName("business_status_id");

                entity.Property(e => e.BusinessSubdistrict)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("business_subdistrict");

                entity.Property(e => e.BusinessTel)
                    .HasMaxLength(10)
                    .HasColumnName("business_tel")
                    .IsFixedLength(true);

                entity.Property(e => e.BusinessZipcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("business_zipcode");

                entity.HasOne(d => d.BusinessStatus)
                    .WithMany(p => p.Business)
                    .HasForeignKey(d => d.BusinessStatusId)
                    .HasConstraintName("FK_Business_StatusBusiness");
            });

            modelBuilder.Entity<DetailServices>(entity =>
            {
                entity.Property(e => e.DetailservicesId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("detailservices_id");

                entity.Property(e => e.DetailservicesRaftId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("detailservices_raft_id");

                entity.Property(e => e.DetailservicesServicesId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("detailservices_services_id");

                entity.HasOne(d => d.DetailservicesRaft)
                    .WithMany(p => p.DetailServices)
                    .HasForeignKey(d => d.DetailservicesRaftId)
                    .HasConstraintName("FK_DetailServices_Raft");

                entity.HasOne(d => d.DetailservicesServices)
                    .WithMany(p => p.DetailServices)
                    .HasForeignKey(d => d.DetailservicesServicesId)
                    .HasConstraintName("FK_DetailServices_Services");
            });

            modelBuilder.Entity<Map>(entity =>
            {
                entity.Property(e => e.MapId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("map_id");

                entity.Property(e => e.MapBusinessId)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("map_business_id");

                entity.Property(e => e.MapLatitude)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("map_latitude");

                entity.Property(e => e.MapLongitude)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("map_longitude");

                entity.HasOne(d => d.MapBusiness)
                    .WithMany(p => p.Map)
                    .HasForeignKey(d => d.MapBusinessId)
                    .HasConstraintName("FK_Map_Business");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.OrderId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("order_id");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("date")
                    .HasColumnName("order_date");

                entity.Property(e => e.OrderDeposit).HasColumnName("order_deposit");

                entity.Property(e => e.OrderImageDeposit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("order_image_deposit");

                entity.Property(e => e.OrderImagePay)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("order_image_pay");

                entity.Property(e => e.OrderLastdate)
                    .HasColumnType("date")
                    .HasColumnName("order_lastdate");

                entity.Property(e => e.OrderPay).HasColumnName("order_pay");

                entity.Property(e => e.OrderPrice).HasColumnName("order_price");

                entity.Property(e => e.OrderPromotionId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("order_promotion_id");

                entity.Property(e => e.OrderStatusId).HasColumnName("order_status_id");

                entity.Property(e => e.OrderUserId)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("order_user_id");

                entity.HasOne(d => d.OrderPromotion)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.OrderPromotionId)
                    .HasConstraintName("FK_Order_Promotion");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_Order_StatusOrder");

                entity.HasOne(d => d.OrderUser)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.OrderUserId)
                    .HasConstraintName("FK_Order_User");
            });

            modelBuilder.Entity<OrderDetails>(entity =>
            {
                entity.Property(e => e.OrderDetailsId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("orderDetails_ID");

                entity.Property(e => e.OrderDetailsOrderId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("orderDetails_order_id");

                entity.Property(e => e.OrderDetailsPrice).HasColumnName("orderDetails_price");

                entity.Property(e => e.OrderDetailsRaftId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("orderDetails_raft_id");

                entity.HasOne(d => d.OrderDetailsOrder)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderDetailsOrderId)
                    .HasConstraintName("FK_OrderDetails_Order");

                entity.HasOne(d => d.OrderDetailsRaft)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderDetailsRaftId)
                    .HasConstraintName("FK_OrderDetails_Raft");
            });

            modelBuilder.Entity<OrderServices>(entity =>
            {
                entity.HasKey(e => e.OsId);

                entity.Property(e => e.OsId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("os_id");

                entity.Property(e => e.OsOrderId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("os_order_id");

                entity.Property(e => e.OsServiceId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("os_service_id");

                entity.HasOne(d => d.OsOrder)
                    .WithMany(p => p.OrderServices)
                    .HasForeignKey(d => d.OsOrderId)
                    .HasConstraintName("FK_OrderServices_Order");

                entity.HasOne(d => d.OsService)
                    .WithMany(p => p.OrderServices)
                    .HasForeignKey(d => d.OsServiceId)
                    .HasConstraintName("FK_OrderServices_Services");
            });

            modelBuilder.Entity<Promotion>(entity =>
            {
                entity.Property(e => e.PromotionId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("promotion_id");

                entity.Property(e => e.ProBusinessId)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("pro_business_id");

                entity.Property(e => e.PromotionDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("promotion_details");

                entity.Property(e => e.PromotionDiscoun).HasColumnName("promotion_discoun");

                entity.Property(e => e.PromotionImage)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("promotion_image");

                entity.Property(e => e.PromotionLastdate)
                    .HasColumnType("date")
                    .HasColumnName("promotion_lastdate");

                entity.Property(e => e.PromotionName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("promotion_name");

                entity.Property(e => e.PromotionStartdate)
                    .HasColumnType("date")
                    .HasColumnName("promotion_startdate");

                entity.Property(e => e.PromotionStatusId).HasColumnName("promotion_status_id");

                entity.HasOne(d => d.ProBusiness)
                    .WithMany(p => p.Promotion)
                    .HasForeignKey(d => d.ProBusinessId)
                    .HasConstraintName("FK_Promotion_Business");

                entity.HasOne(d => d.PromotionStatus)
                    .WithMany(p => p.Promotion)
                    .HasForeignKey(d => d.PromotionStatusId)
                    .HasConstraintName("FK_Promotion_StatusPromotion");
            });

            modelBuilder.Entity<Raft>(entity =>
            {
                entity.Property(e => e.RaftId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("raft_id");

                entity.Property(e => e.RaftBusinessId)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("raft_business_id");

                entity.Property(e => e.RaftDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("raft_Details");

                entity.Property(e => e.RaftImage)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("raft_Image");

                entity.Property(e => e.RaftName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("raft_Name");

                entity.Property(e => e.RaftPrice).HasColumnName("raft_Price");

                entity.HasOne(d => d.RaftBusiness)
                    .WithMany(p => p.Raft)
                    .HasForeignKey(d => d.RaftBusinessId)
                    .HasConstraintName("FK_Raft_Business");
            });

            modelBuilder.Entity<Services>(entity =>
            {
                entity.Property(e => e.ServicesId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("services_id");

                entity.Property(e => e.SerBusinessId)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("ser_business_id");

                entity.Property(e => e.ServicesDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("services_details");

                entity.Property(e => e.ServicesImagePaht)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("services_image_paht");

                entity.Property(e => e.ServicesName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("services_name");

                entity.Property(e => e.ServicesPrice).HasColumnName("services_price");

                entity.Property(e => e.ServicesVedioPaht)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("services_vedio_paht");

                entity.HasOne(d => d.SerBusiness)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.SerBusinessId)
                    .HasConstraintName("FK_Services_Business");
            });

            modelBuilder.Entity<StatusBusiness>(entity =>
            {
                entity.HasKey(e => e.StatusBId);

                entity.Property(e => e.StatusBId).HasColumnName("statusB_id");

                entity.Property(e => e.StatusBName)
                    .HasMaxLength(50)
                    .HasColumnName("statusB_name");
            });

            modelBuilder.Entity<StatusOrder>(entity =>
            {
                entity.HasKey(e => e.SorderId);

                entity.Property(e => e.SorderId).HasColumnName("sorder_id");

                entity.Property(e => e.SorderName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sorder_name");
            });

            modelBuilder.Entity<StatusPromotion>(entity =>
            {
                entity.HasKey(e => e.SpromotionId);

                entity.Property(e => e.SpromotionId).HasColumnName("spromotion_id");

                entity.Property(e => e.SpromotionName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("spromotion_name");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.UserId)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("user_id");

                entity.Property(e => e.UserEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("user_email");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_name");

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_password");

                entity.Property(e => e.UserTel)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("user_tel");
            });

            modelBuilder.Entity<ViewRafts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRafts");

                entity.Property(e => e.ActivityDetails)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("activity_details");

                entity.Property(e => e.ActivityId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("activity_id");

                entity.Property(e => e.ActivityName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("activity_name");

                entity.Property(e => e.BusinessAccountnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("business_Accountnumber");

                entity.Property(e => e.BusinessAddress)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("business_address");

                entity.Property(e => e.BusinessBank)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_bank");

                entity.Property(e => e.BusinessDistrict)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("business_district");

                entity.Property(e => e.BusinessEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_email");

                entity.Property(e => e.BusinessId)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("business_id");

                entity.Property(e => e.BusinessIdline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("business_idline");

                entity.Property(e => e.BusinessName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_name");

                entity.Property(e => e.BusinessPassword)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("business_password");

                entity.Property(e => e.BusinessProvince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("business_province");

                entity.Property(e => e.BusinessRegister)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("business_register");

                entity.Property(e => e.BusinessStatusId).HasColumnName("business_status_id");

                entity.Property(e => e.BusinessSubdistrict)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("business_subdistrict");

                entity.Property(e => e.BusinessTel)
                    .HasMaxLength(10)
                    .HasColumnName("business_tel")
                    .IsFixedLength(true);

                entity.Property(e => e.BusinessZipcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("business_zipcode");

                entity.Property(e => e.DetailservicesId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("detailservices_id");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("date")
                    .HasColumnName("order_date");

                entity.Property(e => e.OrderDeposit).HasColumnName("order_deposit");

                entity.Property(e => e.OrderDetailsId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("orderDetails_ID");

                entity.Property(e => e.OrderDetailsPrice).HasColumnName("orderDetails_price");

                entity.Property(e => e.OrderId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("order_id");

                entity.Property(e => e.OrderImageDeposit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("order_image_deposit");

                entity.Property(e => e.OrderImagePay)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("order_image_pay");

                entity.Property(e => e.OrderPay).HasColumnName("order_pay");

                entity.Property(e => e.OrderPrice).HasColumnName("order_price");

                entity.Property(e => e.OsId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("os_id");

                entity.Property(e => e.PromotionDetails)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("promotion_details");

                entity.Property(e => e.PromotionDiscoun).HasColumnName("promotion_discoun");

                entity.Property(e => e.PromotionId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("promotion_id");

                entity.Property(e => e.PromotionLastdate)
                    .HasColumnType("date")
                    .HasColumnName("promotion_lastdate");

                entity.Property(e => e.PromotionName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("promotion_name");

                entity.Property(e => e.PromotionStartdate)
                    .HasColumnType("date")
                    .HasColumnName("promotion_startdate");

                entity.Property(e => e.RaftDetails)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("raft_Details");

                entity.Property(e => e.RaftId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("raft_id");

                entity.Property(e => e.RaftName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("raft_Name");

                entity.Property(e => e.RaftPrice).HasColumnName("raft_Price");

                entity.Property(e => e.ServicesId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("services_id");

                entity.Property(e => e.ServicesName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("services_name");

                entity.Property(e => e.ServicesPrice).HasColumnName("services_price");

                entity.Property(e => e.SorderId).HasColumnName("sorder_id");

                entity.Property(e => e.SorderName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sorder_name");

                entity.Property(e => e.SpromotionId).HasColumnName("spromotion_id");

                entity.Property(e => e.SpromotionName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("spromotion_name");

                entity.Property(e => e.StatusBId).HasColumnName("statusB_id");

                entity.Property(e => e.StatusBName)
                    .HasMaxLength(50)
                    .HasColumnName("statusB_name");

                entity.Property(e => e.UserEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("user_email");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("user_id");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_name");

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_password");

                entity.Property(e => e.UserTel)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("user_tel");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}